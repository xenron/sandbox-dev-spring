apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

apply plugin: 'maven'
apply plugin: 'maven-publish'

apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'project-report'

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = '1.0'
jar {
  manifest {
    attributes 'Implementation-Title': 'Gradle Quickstart',
               'Implementation-Version': version
  }
}

repositories {
  mavenCentral()
  jcenter()
}

sourceSets {
  main {
    java {
      srcDirs = ['src/main/java']
    }
    resources {
      srcDirs = ['src/main/resources']
    }
  }
  test {
    java {
      srcDirs = ['src/test/java']
    }
    resources {
      srcDirs = ['src/test/resources']
    }
  }
}

dependencies {
  compile("javax.validation:validation-api:${javaxValidationVersion}")

  compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'

  compile("org.springframework:spring-context:${springVersion}")
  compile("org.springframework:spring-context-support:${springVersion}")
  compile("org.springframework:spring-aop:${springVersion}")
  compile("org.springframework:spring-aspects:${springVersion}")
  compile("org.springframework:spring-tx:${springVersion}")
  compile("org.springframework:spring-jdbc:${springVersion}")
  compile("org.springframework:spring-orm:${springVersion}")
  compile("org.springframework:spring-web:${springVersion}"){
    exclude group: 'commons-logging', module: 'commons-logging'
  }
  compile("org.springframework:spring-webmvc:${springVersion}"){
    exclude group: 'commons-logging', module: 'commons-logging'
  }
  compile("org.springframework:spring-websocket:${springVersion}"){
    exclude group: 'commons-logging', module: 'commons-logging'
  }
  compile("org.springframework.boot:spring-boot:${springbootVersion}")
  compile("org.springframework.boot:spring-boot-autoconfigure:${springbootVersion}")

  compile("cglib:cglib:${cglibVersion}")
  compile("org.objenesis:objenesis:${objenesisVersion}")
  compile("joda-time:joda-time:${jodaTimeVersion}")

  testCompile("junit:junit:${junitVersion}")
  testCompile("org.hamcrest:hamcrest-all:${hamcrestVersion}")
  testCompile("org.mockito:mockito-core:${mockitoVersion}"){
    exclude group:'org.hamcrest', module:'hamcrest-core'
  }
  testCompile("org.powermock:powermock-module-junit4:${powermockVersion}"){
    exclude group:'org.javassist', module:'javassist'
  }
  testCompile("org.powermock:powermock-api-mockito:${powermockVersion}"){
    exclude group:'org.mockito', module:'mockito-all'
  }
  testCompile("org.springframework:spring-test:${springVersion}"){
    exclude group: 'commons-logging', module: 'commons-logging'
  }
}

test {
  systemProperties 'property': 'value'
  // enable TestNG support (default is JUnit)
  // useTestNG()

  // set a system property for the test JVM(s)
  systemProperty 'some.prop', 'value'

  // explicitly include or exclude tests
  // include 'org/foo/**'
  // exclude 'org/boo/**'
  include 'geym/dg/ch5/scope/**'

  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true

  // set heap size for the test JVM(s)
  minHeapSize = "128m"
  maxHeapSize = "512m"

  // set JVM arguments for the test JVM(s)
  jvmArgs '-XX:MaxPermSize=256m'

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
    logger.lifecycle("Running test: " + descriptor)
  }

  // listen to standard out and standard error of the test JVM(s)
  onOutput { descriptor, event ->
    logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }
}

uploadArchives {
  repositories {
    flatDir {
      dirs 'repos'
    }
  }
}
